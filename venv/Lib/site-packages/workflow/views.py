import traceback

from rest_framework import status
from rest_framework.authentication import TokenAuthentication
from rest_framework.response import Response
from rest_framework.views import APIView

from api.logger_directory import requests_logger
from commons.backends import WorkflowAuthentication
from workflow.serializers import WorkflowTransitionSerializer, WorkflowTransactionSerializer
from workflow.services import get_hierarchy_by_request, apply_workflow_action, get_model_info, \
    get_all_transactions

WF_VIEWS = requests_logger()


class WorkflowHierarchy(APIView):

    def get(self, request):
        response_data = get_hierarchy_by_request(request.GET)
        if response_data:
            serialize_data = WorkflowTransitionSerializer(response_data, many=True)
            return Response(data=serialize_data.data, status=status.HTTP_200_OK)
        else:
            return Response(status=status.HTTP_400_BAD_REQUEST)


class WorkflowTransactions(APIView):

    def get(self, request):
        response_data = get_all_transactions(request.GET)
        serialize_data = WorkflowTransactionSerializer(response_data, many=True)
        return Response(data=serialize_data.data, status=status.HTTP_200_OK)


class GetApprovalModel(APIView):
    authentication_classes = [WorkflowAuthentication]

    def get(self, request):
        response = get_model_info(request)
        if response:
            final_response = Response(response, status=200)
            return final_response

        return Response(status=400)


class UpdateWorkflow(APIView):
    authentication_classes = [TokenAuthentication, WorkflowAuthentication]

    def patch(self, request, **kwargs):
        try:
            response = apply_workflow_action(request)
            return response
        except Exception as exc:
            WF_VIEWS.error("Exception occurred")
            WF_VIEWS.error(traceback.format_exc())
            return Response(str(exc), status=status.HTTP_500_INTERNAL_SERVER_ERROR)
