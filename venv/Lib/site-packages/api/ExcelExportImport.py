import json
from datetime import datetime
from collections import defaultdict
import os
import pandas as pd
from logging_essar import init_logging


def get_filename():
    """
    Creates file name based on timestamp
    :return: Name of file
    :rtype: str
    """
    now = datetime.now()
    now = str(now)
    to_replace = [' ', '-', ':', '.']
    for each in to_replace:
        now = now.replace(each, '_')
    return now + '.xlsx'


class ExcelImportExport:
    """
    This class takes json data as an argument and converts it into Pandas DataFrame and then exports to Excel file.
    """
    def __init__(self, logger):
        self.logger_excel = logger

    def export_to_excel(self, data, primary_key):
        """
        This function will generate excel file based on the input of json data and sends back post request with
        absolute file path of the generated excel sheet
        :param data: JSON Data from UI
        :type data: dict
        :return: None
        :rtype: None
        """
        data = json.loads(data)
        columnList = data['columns']
        df = []
        for each in data['results']:
            keys = list(columnList)
            for key in keys:
                if type(each[key]) is dict:
                    each[key] = each[key][list(each[key].keys())[0]]
                elif type(each[key]) is list and len(each[key]) >= 0:
                    # each[key] = each[key][0][list(each[key][0].keys())[0]]
                    each[key] = len(each[key])
            df.append(each)

        temp_dict = defaultdict(list)
        for each in df:
            for key, value in each.items():
                if key in columnList:
                    temp_dict[key].append(value)
                elif columnList is None:
                    temp_dict[key].append(value)
        df = pd.DataFrame.from_dict(dict(temp_dict))
        file_name = get_filename()
        try:
            df.set_index(primary_key, inplace=True)
        except Exception as e:
            print(e)
        df.to_excel(file_name, index=False)
        self.logger_excel.info("Excel sheet generated for input json data")
        # post_url_data(file_name)
        file = None
        with open(file_name, 'rb') as f:
            file = f.readlines()
        os.remove(file_name)
        return file

    def get_latest_db_data(self, data1, excel_data, primary_key):
        """
        Gets all the records from database of input table name and assumes first column as primary key
        and also returns name of primary key column for further usage.
        :param table_name: Name of table to get data
        :type table_name: str
        :return: Retrieved data from database as DataFrame
        :rtype: pandas.core.frame.DataFrame, str
        """

        return self.get_df_difference(data1, excel_data, primary_key)

    def get_df_difference(self, db_data, excel_data, primary_key):
        """
        Gets the difference between two DataFrame using pandas merge function and lambda expression
        :param primary_key: Primary key of the data from database which is first column of the dataframe
        :type primary_key: str
        :param db_data: Database table data as DataFrame
        :type db_data: pandas.core.frame.DataFrame
        :param excel_data: Excel file data as DataFrame
        :type excel_data: pandas.core.frame.DataFrame
        :return: None
        :rtype: None
        """

        db_data = db_data.astype(excel_data.dtypes.to_dict())

        difference = db_data.merge(
            excel_data, indicator=True, how='right').loc[lambda x: x['_merge'] != 'both']
        return self.check_excel_data(difference, db_data, primary_key)

    def check_excel_data(self, difference_df, db_data, primary_key):
        """
        This method checks rows to update and insert into database.
        Separate function call is made for both insert and update operations
        :param primary_key: Primary key of the data from database which is first column of the dataframe
        :type primary_key: str
        :param difference_df: Difference between database data and excel data
        :type difference_df: pandas.core.frame.DataFrame
        :param db_data: Data from database
        :type db_data: pandas.core.frame.DataFrame
        :return: None
        :rtype: None
        """

        try:
            return_list = []
            new_id = list(difference_df[primary_key])
            old_id = list(db_data[primary_key])
            insert_id_data = [each for each in new_id if each not in old_id]
            insert_df = [pd.DataFrame(
                difference_df[difference_df[primary_key] == each]) for each in insert_id_data]
            if insert_df:
                insert_data = pd.concat(insert_df)
                self.logger_excel.info(
                    "No. of data to insert : %s" % len(insert_df))
                insert_data_dict = insert_data.to_dict(orient='records')
                # print(insert_data_dict)
                return_list.append(insert_data_dict)
                # self.db_operations('insert', insert_data, primary_key)
            else:
                self.logger_excel.info("No new Data to insert")
            update_id_data = [each for each in new_id if each in old_id]
            update_df = [pd.DataFrame(
                difference_df[difference_df[primary_key] == each]) for each in update_id_data]
            if update_df:
                update_data = pd.concat(update_df)
                self.logger_excel.info(
                    "No. of data to update : %s" % len(update_df))
                update_data_dict = update_data.to_dict(orient='records')
                # print(update_data_dict)
                return_list.append(update_data_dict)
                # self.db_operations('update', update_data, primary_key)
            else:
                self.logger_excel.info("No Data to update")
            # print(return_list)
            return return_list
        except Exception as e:
            self.logger_excel.exception(e)


if __name__ == '__main__':
    LOGGER_EXCEL = init_logging(log_name='Excel_ImportExport')
    ExcelImportExport(LOGGER_EXCEL)
