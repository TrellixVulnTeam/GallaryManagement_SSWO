from django_filters import rest_framework as custom_filters
from rest_framework import filters
from django.conf import settings
from api.alias import AliasField

APPLY_SEARCH_MODEL_FIELDS = settings.__dict__['_wrapped'].__dict__['APPLY_SEARCH_MODEL_FIELDS']


def genericfilter(model_obj, filters_dict):

    class ModelFilter(custom_filters.FilterSet):
        locals().update(filters_dict)
        class Meta:
            model = model_obj
            fields = '__all__'
            filter_overrides = {
                AliasField: {
                    'filter_class': custom_filters.CharFilter,
                    'extra': lambda f: {
                        'lookup_expr': 'icontains',
                    }
                }
            }
    return ModelFilter



def genericSearch(model):
    class DynamicSearchFilter(filters.SearchFilter):
        def get_search_fields(self, view, request):
            temp = request.GET.copy()
            if 'page' in temp:
                temp.pop('page')
            if 'pageSize' in temp:
                temp.pop('pageSize')
            temp.setlist('search_fields',APPLY_SEARCH_MODEL_FIELDS[model.lower()])
            return temp.getlist('search_fields', [])

    return DynamicSearchFilter



